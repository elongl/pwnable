from pwn import *


realloc = ELF('re-alloc')
libc = ELF('libc.so')


class Prompts:
    CHOICE = 'Your choice: '
    INDEX = 'Index:'
    SIZE = 'Size:'
    DATA = 'Data:'


class Choices:
    ALLOC = '1'
    REALLOC = '2'
    FREE = '3'


p = gdb.debug(
    realloc.path,
    '''
    b *allocate+0xb5
    b *reallocate+0xc2
    b *rfree+0x55
    define hook-stop
    x/2gx &heap
    end
    c
    ''',
    env=dict(LD_PRELOAD=libc.path)
)

DEFAULT_SIZE = 0x18


def alloc_chunk(index, size=DEFAULT_SIZE, data=None):
    print(f'[*] allocating a chunk at index: {index}')
    p.sendlineafter(Prompts.CHOICE, Choices.ALLOC)
    p.sendlineafter(Prompts.INDEX, str(index))
    p.sendlineafter(Prompts.SIZE, str(size))
    p.sendlineafter(Prompts.DATA, data if data else 'A' * size)


def free_chunk(index):
    print(f'[*] freeing a chunk at index: {index}')
    p.sendlineafter(Prompts.CHOICE, Choices.FREE)
    p.sendlineafter(Prompts.INDEX, str(index))


def realloc_chunk(index, size=DEFAULT_SIZE):
    print(f'[*] reallocating a chunk at index: {index} with size: {size}')
    p.sendlineafter(Prompts.CHOICE, Choices.REALLOC)
    p.sendlineafter(Prompts.INDEX, str(index))
    p.sendlineafter(Prompts.SIZE, str(size))
    if size:
        p.sendlineafter(Prompts.DATA, 'B' * size)


def exploit():
    pass


if __name__ == "__main__":
    exploit()
