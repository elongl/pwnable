'''
This binary has both NX bit enabled,
which means code on the stack cannot be executed,
So I can't pass a shellcode and jump do it.
And canary enabled, which means I can't invoke a buffer overflow within the stack.

One of the ways to overcome this is to gain control of the stack,
and by doing so we can jump to certain functions that are already in the `.text` section (executable).

Ideally what we'd do is set the register according to our needs (SYS_EXECVE, '/bin/sh'),
and then jump to an `int 0x80` instruction.

I noticed that when summing up two very large numbers (INT_MAX) for instance,
there's an integer overflow and I get invalid results, most likely this is what the challenge is about.

Notes:
    - Allocated memory for operands is never freed.
    - Is there a way to exploit the integer overflow?


After quite a lot of time,
I analyzed the program _quite_ deeply and still couldn't find the vulnerability.
What I decided to do is leave IDA "alone" and start thinking about how I'd implement a calculator,
and what could possibly go wrong in the process.

This thought process didn't actually yield any results but it was worth a try.
I decided to start the reversing from the beginning,
and do it more throughout than I initially did, and by that I mean understand every bit of the program,
The goal is to have a magnificent IDA database ;)
'''


'''
32*64+256/128-512
'''

# Segfault!

from pwn import *
p.writeline(f'+{0x1000}+{0x2000}')
'''
0x8049160 <parse_expr+310>    mov    dword ptr [edx + eax*4 + 4], ecx

Registers:

EAX  0x1000
EBX  0x80481b0 (_init) ◂— push   ebx
ECX  0x2000
EDX  0xfff32028 ◂— 0x1001
'''


# Fuzzing (didn't help).

# The multiplier is the maximum value to which you get the right result plus one.
p.writeline('+'.join(['1'] * 513))
# 'expression error!\n0\n'

p.writeline('+'.join(['11'] * 1025))
# '3752\n3752\nexpression error!\n0\n'

p.writeline('+'.join(['111'] * 257))
# 'expression error!\n0\n'

p.writeline('+'.join(['1111'] * 1025))
# '227755\n708682399\n226656\n226656\nexpression error!\n0\n'

p.writeline('1' + '+1-1' * 256)
# '227755\n708682399\n226656\n226656\nexpression error!\n0\n'

# Weird patterns.
