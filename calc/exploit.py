'''
This binary has both NX bit enabled,
which means code on the stack cannot be executed,
So I can't pass a shellcode and jump do it.
And canary enabled, which means I can't invoke a buffer overflow within the stack.

One of the ways to overcome this is to gain control of the stack,
and by doing so we can jump to certain functions that are already in the `.text` section (executable).

Ideally what we'd do is set the register according to our needs (SYS_EXECVE, '/bin/sh'),
and then jump to an `int 0x80` instruction.

I noticed that when summing up two very large numbers (INT_MAX) for instance,
there's an integer overflow and I get invalid results, most likely this is what the challenge is about.
'''

from pwn import *

p = gdb.debug(
    './calc',
    '''
    b *(eval+0x64)
    c
    '''
)
p.writeline('1337+6969')
p.writeline('1337+6969+888')
p.writeline(f'{2 ** 32}+2')
